pipeline {
    agent {
        docker {
            image 'node:latest' // Use the appropriate Node.js version
            args '-p 3000:3000' // If your React app runs on port 3000
        }
    }
    
    stages {
        stage('Build') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }
        
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        
        stage('Package') {
            steps {
                sh 'tar -czvf my-app.tar.gz build' // Package the built app
            }
        }
        
        stage('Preview') {
            steps {
                // Start a simple HTTP server to preview the build
                sh 'cd build && python -m http.server &'
            }
        }

        stage('Manual Approval') {
            steps {
                script {
                    // Pause and wait for user input
                    input "Preview the application and approve to proceed"
                }
            }
        }
        
        stage('Publish Artifact') {
            steps {
                // Publish to Nexus or Docker registry (choose one)
                // Example Nexus repository URL: http://nexus.example.com:8081/repository/maven-releases/
                script {
                    def server = Artifactory.server 'nexus'
                    def buildInfo = Artifactory.newBuildInfo()
                    buildInfo.env.capture = true
                    server.upload spec: buildInfo, buildInfo: buildInfo
                }

                // OR Publish to Docker registry
                // sh 'docker build -t my-react-app .'
                // sh 'docker push my-react-app'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Replace 'my-app' and other values with your actual deployment configurations
                    sh 'kubectl apply -f kubernetes/deployment.yaml'
                    sh 'kubectl apply -f kubernetes/service.yaml'
                }
            }
        }
    }
}
